the following building blocks exist:

RR GG BB
R  G  B

RG GB BR
B  R  G

GR BG RB
B  R  G

this is an example coloured triangle:

RRGBRGBB
RBRGBRB
GGBRGG
GRGBG
BBRR
BGR
RB
G

the base of the triangle (lower line) is given.
we are looking for the letter at its tip.

? - R, G, B
--
---
----
-----
------
-------
RRGBRGBB

we need to pass 3x 100 tests to solve the challenge.
a guess will right 1 in 3 times (1/3).
(1/3)^300 are bad odds unfortunately.

---

N: letter count
U: missing letters count
U = N*(N-1)/2 ~= N^2

going through all letters will take quadratic time.
optimizing the dynamic programming solution might work.

---

let's look at invididual letters instead:

RR..R...
R.R..R.
...R..
.R...
..RR
..R
R.
.

..G..G..
...G...
GG..GG
G.G.G
....
.G.
..
G

...B..BB
.B..B.B
..B...
...B.
BB..
B..
.B
.

this looks suspicious.
let's mirror and reverse some of these:
https://www.messletters.com/en/mirrored

...Я..ЯЯ
.Я..Я.Я
..Я...
...Я.
ЯЯ..
Я..
.Я
.

looks like B!
this was mirrored on the vertical axis.

thus, whenever we know an R, we also know where a (corresponding) B is.
now, since we know where R's and B's are, the rest must be G's!

let's look at this step by step:
a new uppercase letter is derived from the building blocks above (the rules).
a new lowercase letter stems from the discovery of the mirroring rule.
lowercase letters are converted to uppercase in the next step.

RRGBRGBB

RRGBRGBB
R.....b <- mirror it on the vertical axis, then replace with B!

RRGBRGBB
RB...rB <- same goes the other way round (from B to R).

RRGBRGBB
RBR.bRB

RRGBRGBB
RBR.BRB

...

how does this help though?
we still need to go from top to bottom.
if only there was some vertical mirroring.

this is the only stuff we know:

RR..R...
..G..G..
...B..BB

---

one thing is apparent in the above example:
R is the mirrored version of B, and vice versa.
G happens to be the letter at the bottom.

actually, with the following reasoning:

if you replace a triangle's character A' with character B',
then mirror that triangle
and observe that the resulting triangle is identical to the original one,
when only looking at the positions of B' characters,
then the intersection of positions of character A'
and positions of character B' in the (original) triangle
must be the empty set.
from that we can reason that the bottommost character
can only be the third and remaining character C'.
otherwise A' and B' would share the same position, which is not possible.

in the previous example R was A', B was B' and G was C'.

---

let's see if this holds true with different examples.
here's one from the comments:

R.R..R.
...R..
.R...
..RR
..R
R.
.

...G...
GG..GG
G.G.G
....
.G.
..
G

.B..B.B
..B...
...B.
BB..
B..
.B
.

R and B are again the mirrored version of each other.
G must then be the character at the bottom.

---

let's see what happens if nothing is mirrored in the first line:

RBBBB
GBBB
RBB
GB
R

the corresponding parts:

R....
....
R..
..
R

.....
G...
...
G.
.

.BBBB
.BBB
.BB
.B
.

can't see anything mirrored or rotated.
maybe we shouldn't use so many letters of the same kind?

---

RGBG
BRR
GR
B

parts:

R...
.RR
.R
.

.G.G
...
G.
.

..B.
B..
..
B

B is the mirrored version of G on the north-west to south-east axis.

---

let's investigate the excessive use of the same letter a bit more.
whenever there's a triangle just one letter in the base,
then there are no other letters in the triangle:

RRR
RR
R

in that case the bottom letter must be the same letter.

let's sprinkle one different letter in:

RGRRRR
BBRRR
BGRR
RBR
GG
G

parts:

R.RRRR
..RRR
..RR
R.R
..
.

.G....
.....
.G..
...
GG
G

......
BB...
B...
.B.
..
.

wait a second!
let's slice an equally sized part out of parts G and B:

.....
.G..
...
GG
G

BB...
B...
.B.
..
.

let's edit G step by step.
first align it to the bottom:

.
..
.G.
G...
GG...

oh, this is B mirrored on the horizontal axis!

why is that? simple!
the first character on each line in the original triangle
makes the following string of letters (from top to bottom):

RBBRGG
 =====

the underlined part fulfills our discovered property!
(BB is at the position of GG if mirrored)

---

here's a longer example:

RBRGBRBGGRRRBGBBBGG
GGBRGGRGBRRGRRBBRG
GRGBGBBRGRBBRGBGB
BBRRRBGBBGBGBRRR
BGRRGRRBRRRRGRR
RBRBBRGGRRRBBR
GGGBGBGBRRGBG
GGRRRRRGRBRR
GBRRRRBBGGR
RGRRRGBRGB
BBRRBRGBR
BGRGGBRG
RBBGRGB
GBRBBR
RGGBG
BGRR
RBR
GG
G

with parts (north-west aligned):

R.R..R...RRR.......
...R..R..RR.RR..R.
.R.....R.R..R....
..RRR........RRR
..RR.RR.RRRR.RR
R.R..R..RRR..R
........RR...
..RRRRR.R.RR
..RRRR....R
R.RRR..R..
..RR.R..R
..R...R.
R...R..
..R..R
R....
..RR
R.R
..
.

.B..B.B.....B.BBB..
..B.....B.....BB..
...B.BB...BB..B.B
BB...B.BB.B.B...
B......B.......
.B.BB......BB.
...B.B.B...B.
.........B..
.B....BB...
......B..B
BB..B..B.
B....B..
.BB...B
.B.BB.
...B.
B...
.B.
..
.

...G...GG....G...GG
GG..GG.G...G.....G
G.G.G...G....G.G.
......G..G.G....
.G..G.......G..
......GG......
GGG.G.G...G.G
GG.....G....
G.......GG.
.G...G..G.
......G..
.G.GG..G
...G.G.
G.....
.GG.G
.G..
...
GG
G

can we find a substring that has the mirror property?
the larger the substring the further down the character is.
the more characters we can guess,
the likelier it is that they are in close proximity.
characters in close proximity can form a new, small triangle
whose missing character can be inferred (with the initial ruleset).

let's mark all sequences we can find,
where we can make out the mirror property:

1          4
-------    ---
R.R..R...RRR.......
.B..B.B.....B.BBB..
...G...GG....G...GG
       ----    ----
       2       3

let's put the digits at the corresponding position in the triangle:

RBRGBRBGGRRRBGBBBGG
..................
...........4.....
.......2.......3
...............
..............
1............
............

---

it is possible to force a specific letter to be at the bottom of a new triangle
by duplicating the base string, reversing it
and replacing A' with B' and B' with A'.
the character at the bottom must then be C':

```
s = set('RGB')
pairs = ['RG', 'GB', 'BR']

def generate(n):
    return ''.join(random.choice(list(s)) for _ in range(n))

def reverse(s):
    return ''.join(list(reversed(s)))

def counter(s, c):
    x = '#'
    r = reverse(s)
    a, b = tuple(c)
    r = r.replace(a, x)
    r = r.replace(b, a)
    r = r.replace(x, b)
    return r

for pair in pairs:
    for i in range(100):
        l = generate(40)
        r = counter(l, pair)
        actual = triangle(l + r)
        expected = list(s - set(pair))[0]
        test.assert_equals(actual, expected)
        print(l, r, actual, expected)
```

splitting in half and doing this for both halves doesn't give any clues either:

```
for i in range(10):
    a = generate(10)
    b = generate(10)
    for pair in pairs:
        ax = counter(a, pair)
        bx = counter(b, pair)
        u = triangle(a + ax)
        v = triangle(bx + b)
        print(pair, '-', u, v)
    print(triangle(a + b))
    print()
```

---

idea: try to see if we can determine the bottom letter
with only the left- and rightmost letter of the base sequence.

this actually worked every time for a length of 10 (fortunately).
if it hadn't I would have given up this idea!

trying other lengths reveals, that it does not work for every length.
let's see which lengths work:

```
for length in range(2, 1000):
    is_ok = True
    for _ in range(16):
        x = generate(length)
        t = triangle(x)
        a, b = x[0], x[-1]
        if t != combine(a, b):
            is_ok = False
            break
    if is_ok:
        print(length)
```

we get the following numbers: 2, 4, 10, 28, 82, 244, 730
what does the on-line encyclopedia of integer sequences(R) have to say to this:
https://oeis.org/search?q=2%2C4%2C10%2C28%2C82%2C244%2C730

there indeed is a sequence with this pattern!
the next number would be 2188, which is a length that works every time too!

this is the formula of the sequence:

    a(n) = 3^n + 1

now, if it's enough to pick the first and last letter
of a string of length N, where N s one of the values of the above sequence,
we can do the following:

  3
 2-----
1-----
-----
RGBRGBRGBGRBGBRGBRGRGBRBGRBG
111123.....................
11123.....................
1123.....................
123....................X <-
.......................

1, 2 and 3 are sample triangles.
the length of the base is N = 5. the length of the string is S = 28.
the row where the arrow points has 24 entries.
We thus need to do S-N+1 = 28-5+1 = 24 computations
in order to skip to the N-1 = 4th row after the initial row.
N-2 = 3 rows did not have to be computed.

for maximum effectiveness N should be
the largest value of the sequence less than or equal to S.
that way we will skip the largest amount of rows possible.
